{
  "id": "46275f91-e63d-4047-a9d7-e4fdcc91192a",
  "title": "Cost control",
  "tasks": {
    "run_javascript_1": {
      "name": "run_javascript_1",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ executionId }) {\n\nconst ssoAPI = 'https://sso.dynatrace.com/sso/oauth2/token';\nconst accountManagementAPI = 'https://api.dynatrace.com'\nconst dynatraceEnvironment = 'XXXXXXX';\nconst dtAPIToken = 'XXXXX';\n\nvar accounts = [\n\t{\"name\":\"\", \"clientId\":\"\", \"clientSecret\":\"\", \"accountUuid\":\"\", \"total_commit\" : XXXXX}\n]\n\nfor (let i = 0; i < accounts.length; i++) {\n\tvar bearerToken = await getBearerToken (accounts[i].clientId, accounts[i].clientSecret, \"urn:dtaccount:\"+accounts[i].accountUuid);\n\tvar accountCost = await getAccountCost (bearerToken, accounts[i].accountUuid);\n\tawait postMetric (\"billing.commit\", \"entity=\"+accounts[i].name, accounts[i].total_commit);\n\tawait postMetric (\"billing.cost\", \"entity=\"+accounts[i].name, accountCost);\n}\n\nasync function getBearerToken (clientId, clientSecret, accountUuid) {\n\n\t// Convert data object to URL-encoded string  \n\tvar urlencoded = new URLSearchParams();\n\turlencoded.append(\"grant_type\", \"client_credentials\");\n\turlencoded.append(\"client_id\", clientId);\n\turlencoded.append(\"client_secret\", clientSecret);\n\turlencoded.append(\"scope\", \"account-uac-read\");\n\turlencoded.append(\"resoruce\", accountUuid);\n\n\t// Make the POST request\n\tconst response = await fetch(ssoAPI, {\n\t  method: 'POST', // *GET, POST, PUT, DELETE, etc.\n\t  headers: {\n\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t  },\n\t  body: urlencoded // body data type must match \"Content-Type\" header\n\t});\n  \n\t// Parse the JSON response\n\tconst jsonResponse = await response.json();\n  \n\treturn jsonResponse.access_token;\n}\n\nasync function getAccountCost (bearerToken, accountUuid) {\n\t\n\tconst apiUrl = accountManagementAPI+'/sub/v2/accounts/'+accountUuid+'/subscriptions';\n\tvar cost = 0;\n\n\t// Make the POST request\n\tconst response = await fetch(apiUrl, {\n\t\tmethod: 'GET', // *GET, POST, PUT, DELETE, etc.\n\t\theaders: {\n\t\t\t'Authorization': 'Bearer '+bearerToken\n\t\t}\n\t\t});\n\n\tconst jsonResponse = await response.json();\n\n\t// Iterate through the array\n\tfor (let i = 0; i < jsonResponse.data.length; i++) {\n\t\t// Check if the status field equals \"ACTIVE\" or \"EXPIRED\"\n\t\tif (jsonResponse.data[i].status === \"ACTIVE\" || jsonResponse.data[i].status === \"EXPIRED\") {\n\t\t// Get subscription cost and accumulate it\n\t\tcost = cost + await getSubscriptionCost (bearerToken, accountUuid, jsonResponse.data[i].uuid);\n\t\t}\n\t}\n\treturn cost.toFixed(2); // Round cost to 2 decimals\n  }\n\n\nasync function getSubscriptionCost(bearerToken, accountUuid, subscriptionUuid) {\n\n\tconst apiUrl = accountManagementAPI+'/sub/v2/accounts/'+accountUuid+'/subscriptions/'+subscriptionUuid+'/cost';\n\tvar cost = 0;\n\n\t// Make the POST request\n\tconst response = await fetch(apiUrl, {\n\t\tmethod: 'GET', // *GET, POST, PUT, DELETE, etc.\n\t\theaders: {\n\t\t'Authorization': 'Bearer '+bearerToken\n\t\t}\n\t});\n\n\tconst jsonResponse = await response.json();\n\n\tfor (let i = 0; i < jsonResponse.data.length; i++) {\n\t\tcost = cost + jsonResponse.data[i].value;\n\t}\n\n\treturn cost;\n}\n\nasync function postMetric (metricKey, metricDimensions, metricValue) {\n\n\tconst apiUrl = dynatraceEnvironment+'/api/v2/metrics/ingest';\n\n \t// Make the POST request\n\tconst response = await fetch(apiUrl, {\n\t\tmethod: 'POST', // *GET, POST, PUT, DELETE, etc.\n\t\theaders: {\n\t\t'Content-Type': 'text/plain',\n\t\t'Authorization': 'Api-Token '+dtAPIToken\n\t\t},\n\t\tbody: metricKey+','+metricDimensions+' '+metricValue\n\t});\n\n\tconst jsonResponse = await response.json();\n\n  \tconsole.log(metricKey+','+metricDimensions+' '+metricValue);\n\t\n}\n  \n  // e.g. get the current execution\n  const ex = await execution(executionId);\n  console.log('Automated script execution on behalf of', ex.trigger);\n\n  return { triggeredBy: ex.trigger };\n}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    }
  },
  "description": "",
  "actor": "73b3fffe-16c1-48fc-b463-bc357a86e294",
  "owner": "73b3fffe-16c1-48fc-b463-bc357a86e294",
  "ownerType": "USER",
  "isPrivate": true,
  "trigger": {
    "schedule": {
      "isActive": true,
      "isFaulty": false,
      "trigger": {
        "time": "20:00",
        "type": "time"
      },
      "rule": null,
      "filterParameters": {
        "earliestStart": "2024-10-31"
      },
      "timezone": "Europe/Madrid",
      "inputs": {},
      "nextExecution": "2024-11-18T19:00:00.000Z"
    }
  },
  "schemaVersion": 3,
  "type": "STANDARD"
}